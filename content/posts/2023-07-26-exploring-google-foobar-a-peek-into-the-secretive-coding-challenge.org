#+DATE: <2023-07-26 Wed>
#+TITLE: Exploring Google Foobar: A Peek Into the Secretive Coding Challenge
#+URL: /exploring-google-foobar-a-peek-into-the-secretive-coding-challenge/
#+BANNER: 
#+CATEGORIES[]: 
#+TAGS[]: code google foobar
#+AUTHOR: Viet Nguyen

* Introduce
Imagine working on your programming tasks, when suddenly, out of the blue, you receive an unexpected invitation: the Google Foobar challenge. This special coding competition, invitation-only, is designed to discover talented developers like you. Excitement fills the air as you dive into a series of challenging coding puzzles. Upon successfully completing these tasks, you gain access to a secret hiring process, known only to those who conquer the challenge. This clandestine pathway allows you to showcase your problem-solving skills directly to Google's recruiting team. The Foobar challenge offers a thrilling opportunity where your hard work and abilities may lead to a potential career at Google, one of the most esteemed technology companies in the world.

As you embarked on the Google Foobar challenge, a mix of excitement and nervousness embraced you. The puzzles posed a myriad of intriguing problems, pushing the boundaries of your coding knowledge and skills. With each challenge, you delved deep into complex algorithms and problem-solving techniques, determined to crack the code. The experience was both exhilarating and demanding, as you spent countless hours researching, experimenting, and refining your solutions. However, the sense of accomplishment that followed each conquered puzzle was unparalleled. It was an eye-opening journey, showcasing not only your technical capabilities but also your perseverance and determination to overcome challenges. Reflecting on this experience, you are grateful for the opportunities the Foobar challenge provided, and you eagerly anticipate what lies ahead in your programming career.

[[file:/images/google_foobar.png]]

* Level 01:
The cake is not a lie!
#+begin_quote
Commander Lambda has had an incredibly successful week: the first test of the LAMBCHOP doomsday device was completed AND Lambda set a new personal high score in Tetris. To celebrate, the Commander ordered cake for everyone -- even the lowliest of minions! But competition among minions is fierce, and if you don’t cut exactly equal slices of cake for everyone you’ll get in big trouble.
The cake is round, and decorated with M&Ms in a circle around the edge. But while the rest of the cake is uniform, the M&Ms are not: there are multiple colors, and every minion must get exactly the same sequence of M&Ms. Commander Lambda hates waste and will not tolerate any leftovers, so you also want to make sure you can serve the entire cake.
To help you best cut the cake, you have turned the sequence of colors of the M&Ms on the cake into a string: each possible letter (between a and z) corresponds to a unique color, and the sequence of M&Ms is given clockwise (the decorations form a circle around the outer edge of the cake).
Write a function called solution(s) that, given a non-empty string less than 200 characters in length describing the sequence of M&Ms, returns the maximum number of equal parts that can be cut from the cake without leaving any leftovers.
#+end_quote
#+begin_example
Languages
=========
To provide a Python solution, edit solution.py
To provide a Java solution, edit Solution.java
Test cases
==========
Your code should pass the following test cases.
Note that it may also be run against hidden test cases not shown here.
-- Python cases --
Input:
solution.solution(“abccbaabccba”)
Output:
    2
Input:
solution.solution(“abcabcabcabc”)
Output:
    4
-- Java cases --
Input:
Solution.solution(“abccbaabccba”)
Output:
    2
Input:
Solution.solution(“abcabcabcabc”)
Output:
    4
#+end_example

#+begin_src python
def solution(s):
    max_parts = 1
    length = len(s)

    for sub_len in range(1, length // 2 + 1):
        for start in range(length - sub_len + 1):
            substring = s[start:start+sub_len]
            if substring * (length // sub_len) == s:
                max_parts = max(max_parts, length // sub_len)

    return max_parts
#+end_src

* Level 02:
** 01 question:
Don't Get Volunteered!
#+begin_quote
As a henchman on Commander Lambda's space station, you're expected to be resourceful, smart, and a quick thinker. It's not easy building a doomsday device and ordering the bunnies around at the same time, after all! In order to make sure that everyone is sufficiently quick-witted, Commander Lambda has installed new flooring outside the henchman dormitories. It looks like a chessboard, and every morning and evening you have to solve a new movement puzzle in order to cross the floor. That would be fine if you got to be the rook or the queen, but instead, you have to be the knight. Worse, if you take too much time solving the puzzle, you get "volunteered" as a test subject for the LAMBCHOP doomsday device!

To help yourself get to and from your bunk every day, write a function called solution(src, dest) which takes in two parameters: the source square, on which you start, and the destination square, which is where you need to land to solve the puzzle. The function should return an integer representing the smallest number of moves it will take for you to travel from the source square to the destination square using a chess knight's moves (that is, two squares in any direction immediately followed by one square perpendicular to that direction, or vice versa, in an "L" shape). Both the source and destination squares will be an integer between 0 and 63, inclusive, and are numbered like the example chessboard below:
#+end_quote

#+begin_example
-------------------------
| 0| 1| 2| 3| 4| 5| 6| 7|
-------------------------
| 8| 9|10|11|12|13|14|15|
-------------------------
|16|17|18|19|20|21|22|23|
-------------------------
|24|25|26|27|28|29|30|31|
-------------------------
|32|33|34|35|36|37|38|39|
-------------------------
|40|41|42|43|44|45|46|47|
-------------------------
|48|49|50|51|52|53|54|55|
-------------------------
|56|57|58|59|60|61|62|63|
-------------------------
#+end_example


#+begin_example
Languages
=========

To provide a Python solution, edit solution.py
To provide a Java solution, edit Solution.java

Test cases
==========
Your code should pass the following test cases.
Note that it may also be run against hidden test cases not shown here.

-- Python cases --
Input:
solution.solution(19, 36)
Output:
    1

Input:
solution.solution(0, 1)
Output:
    3

-- Java cases --
Input:
Solution.solution(19, 36)
Output:
    1

Input:
Solution.solution(0, 1)
Output:
    3
#+end_example

#+begin_src python
def solution(src, dest):
    chessboard = [[0] * 8 for _ in range(8)]
    visited = [[False] * 8 for _ in range(8)]

    directions = [
        (-2, -1), (-1, -2), (1, -2), (2, -1),
        (-2, 1), (-1, 2), (1, 2), (2, 1)
    ]

    src_row, src_col = get_row_col(src)
    dest_row, dest_col = get_row_col(dest)

    queue = [(src_row, src_col, 0)]
    visited[src_row][src_col] = True

    while queue:
        row, col, moves = queue.pop(0)

        if row == dest_row and col == dest_col:
            return moves

        for d in directions:
            new_row = row + d[0]
            new_col = col + d[1]

            if is_valid_move(new_row, new_col) and not visited[new_row][new_col]:
                queue.append((new_row, new_col, moves+1))
                visited[new_row][new_col] = True

    return -1

def get_row_col(square):
    return square // 8, square % 8

def is_valid_move(row, col):
    return 0 <= row < 8 and 0 <= col < 8
#+end_src

** 02 question:
Please Pass the Coded Messages
#+begin_quote
You need to pass a message to the bunny workers, but to avoid detection, the code you agreed to use is... obscure, to say the least. The bunnies are given food on standard-issue plates that are stamped with the numbers 0-9 for easier sorting, and you need to combine sets of plates to create the numbers in the code. The signal that a number is part of the code is that it is divisible by 3. You can do smaller numbers like 15 and 45 easily, but bigger numbers like 144 and 414 are a little trickier. Write a program to help yourself quickly create large numbers for use in the code, given a limited number of plates to work with.

You have L, a list containing some digits (0 to 9). Write a function solution(L) which finds the largest number that can be made from some or all of these digits and is divisible by 3. If it is not possible to make such a number, return 0 as the solution. L will contain anywhere from 1 to 9 digits. The same digit may appear multiple times in the list, but each element in the list may only be used once.
#+end_quote

#+begin_example
Languages
=========

To provide a Java solution, edit Solution.java
To provide a Python solution, edit solution.py

Test cases
==========
Your code should pass the following test cases.
Note that it may also be run against hidden test cases not shown here.

-- Java cases --
Input:
Solution.solution({3, 1, 4, 1})
Output:
    4311

Input:
Solution.solution({3, 1, 4, 1, 5, 9})
Output:
    94311

-- Python cases --
Input:
solution.solution([3, 1, 4, 1])
Output:
    4311

Input:
solution.solution([3, 1, 4, 1, 5, 9])
Output:
    94311
#+end_example

#+begin_src python
def solution(l):
    def to_int(lst):
        if not lst:
            return 0
        return int("".join(str(d) for d in lst))

    l.sort(reverse=True)
    n = len(l)
    s = sum(l)

    if s % 3 == 0:
        return to_int(l)
    elif s % 3 == 1:
        for i in range(n - 1, -1, -1):
            if l[i] % 3 == 1:
                return to_int(l[:i] + l[i+1:])

        count = 0
        indices = []
        for i in range(n - 1, -1, -1):
            if l[i] % 3 == 2:
                indices.append(i)
                count += 1
                if count == 2:
                    break
        if count == 2:
            return to_int([l[i] for i in range(n) if i not in indices])
    else:
        for i in range(n - 1, -1, -1):
            if l[i] % 3 == 2:
                return to_int(l[:i] + l[i+1:])

        count = 0
        indices = []
        for i in range(n - 1, -1, -1):
            if l[i] % 3 == 1:
                indices.append(i)
                count += 1
                if count == 2:
                    break
        if count == 2:
            return to_int([l[i] for i in range(n) if i not in indices])

    return 0

print(solution([3, 1, 4, 1, 5, 9]))
#+end_src

* Level 03:
** 01 question:
Bomb, Baby!
#+begin_quote
You're so close to destroying the LAMBCHOP doomsday device you can taste it! But in order to do so, you need to deploy special self-replicating bombs designed for you by the brightest scientists on Bunny Planet. There are two types: Mach bombs (M) and Facula bombs (F). The bombs, once released into the LAMBCHOP's inner workings, will automatically deploy to all the strategic points you've identified and destroy them at the same time.

But there's a few catches. First, the bombs self-replicate via one of two distinct processes:
Every Mach bomb retrieves a sync unit from a Facula bomb; for every Mach bomb, a Facula bomb is created;
Every Facula bomb spontaneously creates a Mach bomb.

For example, if you had 3 Mach bombs and 2 Facula bombs, they could either produce 3 Mach bombs and 5 Facula bombs, or 5 Mach bombs and 2 Facula bombs. The replication process can be changed each cycle.

Second, you need to ensure that you have exactly the right number of Mach and Facula bombs to destroy the LAMBCHOP device. Too few, and the device might survive. Too many, and you might overload the mass capacitors and create a singularity at the heart of the space station - not good!

And finally, you were only able to smuggle one of each type of bomb - one Mach, one Facula - aboard the ship when you arrived, so that's all you have to start with. (Thus it may be impossible to deploy the bombs to destroy the LAMBCHOP, but that's not going to stop you from trying!)

You need to know how many replication cycles (generations) it will take to generate the correct amount of bombs to destroy the LAMBCHOP. Write a function solution(M, F) where M and F are the number of Mach and Facula bombs needed. Return the fewest number of generations (as a string) that need to pass before you'll have the exact number of bombs necessary to destroy the LAMBCHOP, or the string "impossible" if this can't be done! M and F will be string representations of positive integers no larger than 10^50. For example, if M = "2" and F = "1", one generation would need to pass, so the solution would be "1". However, if M = "2" and F = "4", it would not be possible.
#+end_quote

#+begin_example
Languages
=========

To provide a Java solution, edit Solution.java
To provide a Python solution, edit solution.py

Test cases
==========
Your code should pass the following test cases.
Note that it may also be run against hidden test cases not shown here.

-- Java cases --
Input:
Solution.solution('4', '7')
Output:
    4

Input:
Solution.solution('2', '1')
Output:
    1

-- Python cases --
Input:
solution.solution('4', '7')
Output:
    4

Input:
solution.solution('2', '1')
Output:
    1
#+end_example

#+begin_src python
def multiplier(a, b):
    diff = a - b
    return (diff / b) + 1

def solution(x, y):
    step, m, f = 0, int(x), int(y)

    while True:
        if m <= 0 or f <= 0:
            break

        if m > 100 or f > 100:
            if m > f:
                mul = multiplier(m, f)
                m -= f * mul
                step += mul
            elif f > m:
                mul = multiplier(f, m)
                f -= m * mul
                step += mul
            else:
                break
        else:
            if m > f:
                m -= f
            elif f > m:
                f -= m
            else:
                break
            step += 1

    if m == 1 and f == 1 and step >= 0:
        return str(step)
    return 'impossible'
#+end_src
